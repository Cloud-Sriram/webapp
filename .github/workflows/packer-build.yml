name: CI/CD test
 
on:
  push:
    branches: [ main ]
 
env:
  PRODUCT_VERSION: "latest"
  ASG_NAME: "auto-scaling-group"
  
 
jobs:
  build_ami:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: 'Bitspilani18#'
          MYSQL_DATABASE: 'testing'
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=7s --health-retries=3
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
 
      - name: Run Node.js project
        uses: actions/setup-node@v3
        with:
          node-version: 20
 
      - name: Wait for MySQL to be ready
        run: |
          until nc -z -v -w30 localhost 3306
          do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
      - name: Install project dependencies
        run: npm install
 
      - name: Run Integration tests
        run: npm test
 
      - name: Zip the file
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'webapp.zip'
          exclusions: '*.git* /*node_modules/* '
 
      - name: Install AWSCLI
        run: sudo pip install awscli
 
      - name: Configure AWS DEV
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEYY }}
          aws-region: us-east-1
 
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
 
      - name: Initialize Packer Init
        working-directory: ./packer-build
        run: packer init .
 
      - name: Build AMI
        working-directory: ./packer-build
        run: packer build --var-file=aws-ubuntu.pkr.hcl
 
      - name: Configure AWS DEMO
        uses: aws-actions/configure-aws-credentials@v4
        with:
 
           aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY}}
           aws-region: us-east-1
 
 
      - name: Retrieve Latest AMI ID
        working-directory: ./packer-build
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
     
      - name: Create New Version of Launch Template
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID  }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY   }}
         
          aws ec2 create-launch-template-version \
          --launch-template-id "mylaunchtemplate" \
          --version-description "New version with AMI ${{ env.AMI_ID }}" \
          --region us-east-1 \
          --source-version 1 \
          --launch-template-data '{"ImageId": "${{ env.AMI_ID }}" }'
 
      - name: Apply Launch Template Refresh
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY  }}
 
 
          refresh_response=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name auto-scaling-group \
          --desired-configuration '{"LaunchTemplate" : { "LaunchTemplateId":"mylaunchtemplate", "Version":"$Latest" }}' \
          --region us-east-1 \
          --query 'InstanceRefreshId' \
          --output text)
 
          while true; do
            refresh_status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name auto-scaling-group \
              --instance-refresh-ids $refresh_response \
              --region us-east-1 \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
      
            if [ "$refresh_status" == "Pending" ] || [ "$refresh_status" == "InProgress" ]; then
              echo "Instance refresh is still in progress. Waiting..."
              sleep 60  # Wait for 60 seconds before checking again
            elif [ "$refresh_status" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              break  # Exit the loop when refresh is successful
            else
              echo "Error: Instance refresh failed or encountered an unexpected status: $refresh_status"
              exit 1  # Exit with an error if refresh fails or has unexpected status
            fi
          done
has context menu