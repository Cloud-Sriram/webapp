name: Run packer build on a template file
on:

  push:

    branches:

        - main

env:

  PRODUCT_VERSION: "1.9.4"

  AMI_REGION: ${{ vars.AMI_REGION }}

  LOGIN_USERNAME: ${{ vars.LOGIN_USERNAME }}

  INSTANCE_TYPE: ${{ vars.INSTANCE_TYPE }}

  AMIOWNERID: ${{ vars.AMIOWNERID }}

  AMISHAREDOWNER: ${{ vars.AMISHAREDOWNER }}

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  PORT: ${{ vars.PORT }}

 

 

jobs:

  packer_build:

    runs-on: ubuntu-latest

    name: Build AMI Image

    env:

        DATABASE_HOST: ${{ vars.DATABASE_HOST }}

        DATABASE_USER: ${{ vars.ROOT_DATABASE_USER }}

        DATABASE_PASSWORD: ${{ vars.ROOT_DATABASE_PASSWORD }}

        DATABASE_NAME: ${{ vars.DATABASE_NAME }}

    

    strategy:

      matrix:

        node-version: [16.x]

 

    steps:

      - name: git checkout current repo code

        uses: actions/checkout@v4

      

      - name: install npm modules

        run: npm ci

 

      - name: fund npm

        run: npm fund

      

      - name: Use Node.js ${{ matrix.node-version }}

        uses: actions/setup-node@v2

        with:

          node-version: ${{ matrix.node-version }}

          cache: 'npm'

        

      - name: Start MySql Server

        run: sudo systemctl start mysql

 

      - name: zip the file

        uses: thedoctor0/zip-release@0.7.1

        with:

          type: 'zip'

          filename: 'webapp.zip'

          exclusions: '*.git* /*node_modules/* '

      

      - name: write variables into env file

        run: |

          echo "DATABASE_HOST: ${{vars.DATABASE_HOST}}" >> .env

          echo "DATABASE_PASSWORD: ${{ vars.DATABASE_PASSWORD }}" >> .env

          echo "DATABASE_NAME: ${{ vars.DATABASE_NAME }}" >> .env

          echo "DATABASE_HOST: ${{ vars.DATABASE_HOST }}" >> .env

          echo "PORT: ${{ vars.PORT }}" >> .env

          echo "below are environment variables"

          cat .env

        shell: bash

 

      - name: Setup `packer`

        uses: hashicorp/setup-packer@main

        id: setup

        with:

          version: ${{ env.PRODUCT_VERSION }}

 

      - name: Check version of packer

        run: packer -v

      

      - name: Add required plugins

        run: packer init .

 

      - name: format packer content

        run: packer fmt .

      

      - name: validate packer

        run: packer validate .

      

      - name: packer build

        run: | 
          packer build -var "region=$AMI_REGION" \
          -var "ssh_username=$LOGIN_USERNAME" \
          -var "instance_type=$INSTANCE_TYPE" \
          -var "ami_users=$AMISHAREDOWNER" \
          -var "owners=$AMIOWNERID" aws-ubuntu.pkr.hcl

      - name: Configure AWS DEMO
        uses: aws-actions/configure-aws-credentials@v4
        with:
  
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1
  
  
      - name: Retrieve Latest AMI ID
        #working-directory: ./
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      
      - name: Create New Version of Launch Template
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY  }}
        
          aws ec2 create-launch-template-version \
          --launch-template-name "mylaunchtemplate" \
          --version-description "New version with AMI ${{ env.AMI_ID }}" \
          --region us-east-1 \
          --source-version 1 \
          --launch-template-data '{"ImageId": "${{ env.AMI_ID }}" }'
  
      - name: Apply Launch Template Refresh
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY   }}

  
          refresh_response=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name auto-scaling-group \
          --desired-configuration '{"LaunchTemplate" : { "LaunchTemplateName":"mylaunchtemplate", "Version":"$Latest" }}' \
          --region us-east-1 \
          --query 'InstanceRefreshId' \
          --output text)

          while true; do
            refresh_status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name auto-scaling-group \
              --instance-refresh-ids $refresh_response \
              --region us-east-1 \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
      
            if [ "$refresh_status" == "Pending" ] || [ "$refresh_status" == "InProgress" ]; then
              echo "Instance refresh is still in progress. Waiting..."
              sleep 60  # Wait for 60 seconds before checking again
            elif [ "$refresh_status" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              break  # Exit the loop when refresh is successful
            else
              echo "Error: Instance refresh failed or encountered an unexpected status: $refresh_status"
              exit 1  # Exit with an error if refresh fails or has unexpected status
            fi
          done